Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
--------------------------
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_set<char> rows[9];
        unordered_set<char> cols[9];
        unordered_set<char> boxes[9];

        for (int r = 0; r < 9; ++r) {
            for (int c = 0; c < 9; ++c) {
                if (board[r][c] == '.') {
                    continue;
                }

                char value = board[r][c];
                int boxIndex = (r / 3) * 3 + (c / 3);

                if (rows[r].count(value) || cols[c].count(value) || boxes[boxIndex].count(value)) {
                    return false;
                }

                rows[r].insert(value);
                cols[c].insert(value);
                boxes[boxIndex].insert(value);
            }
        }

        return true;        
    }
};
------------------------
Calculation Formula:
cpp
Copy code
int boxIndex = (r / 3) * 3 + (c / 3);
Here’s how this works:

r / 3: This integer division determines which of the 3x3 subgrid rows the cell belongs to.
c / 3: This integer division determines which of the 3x3 subgrid columns the cell belongs to.
Multiply (r / 3) by 3 to adjust for the number of columns in each subgrid.
Add (c / 3) to find the exact subgrid index.

Dry Run:
Let’s calculate boxIndex for different cells in the Sudoku board:

1. Cell (r = 0, c = 0)
Calculate:


int boxIndex = (0 / 3) * 3 + (0 / 3);
0 / 3 = 0 (row group index)
0 / 3 = 0 (column group index)
boxIndex = 0 * 3 + 0 = 0
Result:

Cell (0, 0) belongs to subgrid 0.

2. Cell (r = 0, c = 4)
Calculate:

int boxIndex = (0 / 3) * 3 + (4 / 3);
0 / 3 = 0 (row group index)
4 / 3 = 1 (column group index)
boxIndex = 0 * 3 + 1 = 1
Result:

Cell (0, 4) belongs to subgrid 1.

3. Cell (r = 3, c = 6)
Calculate:


int boxIndex = (3 / 3) * 3 + (6 / 3);
3 / 3 = 1 (row group index)
6 / 3 = 2 (column group index)
boxIndex = 1 * 3 + 2 = 5
Result:

Cell (3, 6) belongs to subgrid 5.

------------------------
#include <vector>
#include <unordered_set>

class Solution {
public:
    bool isValidSudoku(std::vector<std::vector<char>>& board) {
        std::unordered_set<char> set;

        // Check each row
        for (int i = 0; i < 9; ++i) {
            set.clear();
            for (int j = 0; j < 9; ++j) {
                if (board[i][j] != '.') {
                    if (set.find(board[i][j]) != set.end()) {
                        return false;
                    }
                    set.insert(board[i][j]);
                }
            }
        }

        // Check each column
        for (int j = 0; j < 9; ++j) {
            set.clear();
            for (int i = 0; i < 9; ++i) {
                if (board[i][j] != '.') {
                    if (set.find(board[i][j]) != set.end()) {
                        return false;
                    }
                    set.insert(board[i][j]);
                }
            }
        }

        // Check each 3x3 sub-grid
        for (int block = 0; block < 9; ++block) {
            set.clear();
            for (int i = 0; i < 3; ++i) {
                for (int j = 0; j < 3; ++j) {
                    int row = 3 * (block / 3) + i;
                    int col = 3 * (block % 3) + j;
                    if (board[row][col] != '.') {
                        if (set.find(board[row][col]) != set.end()) {
                            return false;
                        }
                        set.insert(board[row][col]);
                    }
                }
            }
        }

        return true;
    }
};

----------------------------
