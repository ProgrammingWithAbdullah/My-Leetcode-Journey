Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true

--------------------
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        int counter=0;
        for(int i=0;i<nums.size();i++)
        {
            for(int j=0;j<nums.size();j++)
            {
                if (nums[i]==nums[j])
                {
                    counter += 1;
                    if(counter>1)
                    return true;
                }
            }
            counter=0;
        }
        return false;
    }
};


class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for(int i=1;i<nums.size();i++)
        {
                if (nums[i]==nums[i-1])
                {
                    return true;
                }
        }
        return false;
    }
};

---------------
class Solution {
public:
    bool containsDuplicate(std::vector<int>& nums) {
        std::unordered_set<int> num_set;

        for (int i = 0; i < nums.size(); ++i) { 
            if (num_set.find(nums[i]) != num_set.end()) {
                return true;
            }
            num_set.insert(nums[i]); 
        }
        return false; 
    }
};
-----------------
#include <vector>
#include <unordered_set>

class Solution {
public:
    bool containsDuplicate(std::vector<int>& nums) {
        std::unordered_set<int> num_set;

        for (int num : nums) {
            if (num_set.count(num) > 0) {
                return true;
            }
            num_set.insert(num);
        }
        
        return false;
    }
};
------------------
#include <vector>
#include <unordered_map>

class Solution {
public:
    bool containsDuplicate(std::vector<int>& nums) {
        std::unordered_map<int, int> num_count;

        for (int num : nums) {
            if (num_count[num] > 0) {
                return true;
            }
            num_count[num]++;
        }        
        return false;
    }
};

